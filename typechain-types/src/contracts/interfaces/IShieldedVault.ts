/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IShieldedVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "getMerkleRoot"
      | "isNullifierSpent"
      | "shieldedTransfer"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deposit" | "ShieldedTransfer" | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNullifierSpent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shieldedTransfer",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNullifierSpent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shieldedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    commitment: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    amount: bigint,
    commitment: string
  ];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    commitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShieldedTransferEvent {
  export type InputTuple = [
    nullifier: BytesLike,
    commitment: BytesLike,
    merkleRoot: BytesLike
  ];
  export type OutputTuple = [
    nullifier: string,
    commitment: string,
    merkleRoot: string
  ];
  export interface OutputObject {
    nullifier: string;
    commitment: string;
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    nullifier: BytesLike
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    nullifier: string
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    nullifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IShieldedVault extends BaseContract {
  connect(runner?: ContractRunner | null): IShieldedVault;
  waitForDeployment(): Promise<this>;

  interface: IShieldedVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [amount: BigNumberish, commitment: BytesLike],
    [void],
    "payable"
  >;

  getMerkleRoot: TypedContractMethod<[], [string], "view">;

  isNullifierSpent: TypedContractMethod<
    [nullifier: BytesLike],
    [boolean],
    "view"
  >;

  shieldedTransfer: TypedContractMethod<
    [metaTx: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      amount: BigNumberish,
      nullifier: BytesLike,
      merkleRoot: BytesLike,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [amount: BigNumberish, commitment: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getMerkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isNullifierSpent"
  ): TypedContractMethod<[nullifier: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "shieldedTransfer"
  ): TypedContractMethod<
    [metaTx: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      nullifier: BytesLike,
      merkleRoot: BytesLike,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "ShieldedTransfer"
  ): TypedContractEvent<
    ShieldedTransferEvent.InputTuple,
    ShieldedTransferEvent.OutputTuple,
    ShieldedTransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256,bytes32)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "ShieldedTransfer(bytes32,bytes32,bytes32)": TypedContractEvent<
      ShieldedTransferEvent.InputTuple,
      ShieldedTransferEvent.OutputTuple,
      ShieldedTransferEvent.OutputObject
    >;
    ShieldedTransfer: TypedContractEvent<
      ShieldedTransferEvent.InputTuple,
      ShieldedTransferEvent.OutputTuple,
      ShieldedTransferEvent.OutputObject
    >;

    "Withdraw(address,uint256,bytes32)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}

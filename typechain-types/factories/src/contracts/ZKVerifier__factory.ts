/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ZKVerifier,
  ZKVerifierInterface,
} from "../../../src/contracts/ZKVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_verificationKey",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "isProofVerified",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "markProofAsVerified",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verificationKey",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "verifiedProofs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
      {
        internalType: "bytes32[]",
        name: "publicSignals",
        type: "bytes32[]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a034605757601f61037a38819003918201601f19168301916001600160401b03831184841017605c5780849260209460405283398101031260575751608052604051610307908161007382396080518161015b0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c908163176d80c4146101d657508063673aa9c81461017e5780637ddc907d14610143578063bbcb7c74146100ba5763cad8d75a1461005657600080fd5b346100b55760203660031901126100b55760043567ffffffffffffffff81116100b55761008a610091913690600401610203565b3691610231565b6020815191012060005260006020526040600020600160ff19825416179055600080f35b600080fd5b346100b55760403660031901126100b55760043567ffffffffffffffff81116100b5576100eb903690600401610203565b9060243567ffffffffffffffff81116100b557366023820112156100b55780600401359067ffffffffffffffff82116100b557602490369260051b0101116100b557602091610139916102a0565b6040519015158152f35b346100b55760003660031901126100b55760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346100b55760203660031901126100b55760043567ffffffffffffffff81116100b55761008a6101b2913690600401610203565b602081519101206000526000602052602060ff604060002054166040519015158152f35b346100b55760203660031901126100b5576020906004356000526000825260ff6040600020541615158152f35b9181601f840112156100b55782359167ffffffffffffffff83116100b557602083818601950101116100b557565b92919267ffffffffffffffff821161028a5760405191601f8101601f19908116603f0116830167ffffffffffffffff81118482101761028a576040528294818452818301116100b5578281602093846000960137010152565b634e487b7160e01b600052604160045260246000fd5b6102ab913691610231565b60208151910120600052600060205260ff604060002054166102cc57600190565b60009056fea26469706673582212207e7921b89c90ac82472167755cf0f8491f0377b369d1b8d81bf8f70ab52b140564736f6c634300081a0033";

type ZKVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZKVerifier__factory extends ContractFactory {
  constructor(...args: ZKVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _verificationKey: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_verificationKey, overrides || {});
  }
  override deploy(
    _verificationKey: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_verificationKey, overrides || {}) as Promise<
      ZKVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ZKVerifier__factory {
    return super.connect(runner) as ZKVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKVerifierInterface {
    return new Interface(_abi) as ZKVerifierInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ZKVerifier {
    return new Contract(address, _abi, runner) as unknown as ZKVerifier;
  }
}
